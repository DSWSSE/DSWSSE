// Code generated by command: go run asm.go -out and.s -stubs and.go. DO NOT EDIT.

#include "textflag.h"

// func AND(a []byte, b []byte, res []byte)
// Requires: AVX, AVX2
TEXT ·AND(SB), NOSPLIT, $0-72
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ res_base+48(FP), DX
	MOVQ a_len+8(FP), BX

blockloop:
	CMPQ    BX, $0x00000080
	JL      block32loop
	VMOVUPS (CX), Y0
	VMOVUPS 32(CX), Y1
	VMOVUPS 64(CX), Y2
	VMOVUPS 96(CX), Y3
	VPAND   (AX), Y0, Y0
	VPAND   32(AX), Y1, Y1
	VPAND   64(AX), Y2, Y2
	VPAND   96(AX), Y3, Y3
	VMOVUPS Y0, (DX)
	VMOVUPS Y1, 32(DX)
	VMOVUPS Y2, 64(DX)
	VMOVUPS Y3, 96(DX)
	ADDQ    $0x00000080, AX
	ADDQ    $0x00000080, CX
	ADDQ    $0x00000080, DX
	SUBQ    $0x00000080, BX
	JMP     blockloop

block32loop:
	CMPQ    BX, $0x00000020
	JL      byteloop
	VMOVUPS (CX), Y0
	VPAND   (AX), Y0, Y0
	VMOVUPS Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000020, BX
	JMP     block32loop

byteloop:
	CMPQ BX, $0x00000000
	JE   tail
	SUBQ $0x00000001, BX
	MOVB (AX)(BX*1), SI
	ANDB (CX)(BX*1), SI
	MOVB SI, (DX)(BX*1)
	JMP  byteloop

tail:
	RET

// func AND512(a []byte, b []byte, res []byte)
// Requires: AVX512F
TEXT ·AND512(SB), NOSPLIT, $0-72
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ res_base+48(FP), DX
	MOVQ a_len+8(FP), BX

blockloop_512:
	CMPQ    BX, $0x00000100
	JL      block32loop_512
	VMOVUPS (CX), Z0
	VMOVUPS 64(CX), Z1
	VMOVUPS 128(CX), Z2
	VMOVUPS 192(CX), Z3
	VPANDD  (AX), Z0, Z0
	VPANDD  64(AX), Z1, Z1
	VPANDD  128(AX), Z2, Z2
	VPANDD  192(AX), Z3, Z3
	VMOVUPS Z0, (DX)
	VMOVUPS Z1, 64(DX)
	VMOVUPS Z2, 128(DX)
	VMOVUPS Z3, 192(DX)
	ADDQ    $0x00000100, AX
	ADDQ    $0x00000100, CX
	ADDQ    $0x00000100, DX
	SUBQ    $0x00000100, BX
	JMP     blockloop_512

block32loop_512:
	CMPQ    BX, $0x00000040
	JL      byteloop_512
	VMOVUPS (CX), Z0
	VPANDD  (AX), Z0, Z0
	VMOVUPS Z0, (DX)
	ADDQ    $0x00000040, AX
	ADDQ    $0x00000040, CX
	ADDQ    $0x00000040, DX
	SUBQ    $0x00000040, BX
	JMP     block32loop_512

byteloop_512:
	CMPQ BX, $0x00000000
	JE   tail_512
	SUBQ $0x00000001, BX
	MOVB (AX)(BX*1), SI
	ANDB (CX)(BX*1), SI
	MOVB SI, (DX)(BX*1)
	JMP  byteloop_512

tail_512:
	RET
